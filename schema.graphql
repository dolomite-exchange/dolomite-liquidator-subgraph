type Transaction @entity {
  id: ID! # Defined as transaction hash
  blockNumber: BigInt!
  timestamp: BigInt!
}

type DolomiteMargin @entity {
  id: ID! # Defined as contract address

  numberOfMarkets: Int!

  # risk params
  liquidationRatio: BigDecimal!
  liquidationReward: BigDecimal!
  earningsRate: BigDecimal!
  minBorrowedValue: BigDecimal!
}

type MarketRiskInfo @entity {
  id: ID! # Defined as token address
  token: Token!
  marginPremium: BigDecimal!
  liquidationRewardPremium: BigDecimal!
  isBorrowingDisabled: Boolean!
}

type User @entity {
  id: ID! # Defined as user address
}

type MarginAccount @entity {
  id: ID! # Defined as "userAddress-accountNumber"
  user: User!
  accountNumber: BigInt!
  lastUpdatedTimestamp: BigInt! # Timestamp at which any token value was last updated
  lastUpdatedBlockNumber: BigInt!
  tokenValues: [MarginAccountTokenValue!]! @derivedFrom(field: "marginAccount")
  borrowTokens: [Token!]!
  supplyTokens: [Token!]!
  expirationTokens: [Token!]!
  hasBorrowValue: Boolean!
  hasSupplyValue: Boolean!
  hasExpiration: Boolean!
}

type MarginAccountTokenValue @entity {
  id: ID! # Defined as "user-accountNumber-marketId"
  marginAccount: MarginAccount!
  marketId: BigInt!
  token: Token!
  valuePar: BigDecimal! # Par value of the user's held token. Can be negative, meaning it's borrowed funds.
  expirationTimestamp: BigInt
  expiryAddress: Bytes
  lastUpdateTransaction: Transaction!
  allUpdateTransactions: [Transaction!]!
}

type Token @entity {
  id: ID! # Defined as token address

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # Taken from DolomiteMargin
  marketId: BigInt!
}

type TokenMarketIdReverseMap @entity {
  id: ID! # Defined as marketId.toString()
  token: Token!
}

type AsyncDeposit @entity {
  id: ID! # Defined as "outputToken.id-key"
  key: Bytes!
  marginAccount: MarginAccount!
  effectiveUser: User! # set to the marginAccount.user or owner of an isolation mode address
  status: String! # one of CREATED, DEPOSIT_EXECUTED, DEPOSIT_FAILED, DEPOSIT_CANCELLED, DEPOSIT_CANCELLED_FAILED
  inputToken: Token!
  inputAmount: BigDecimal!
  outputToken: Token!
  minOutputAmount: BigDecimal!
  outputAmount: BigDecimal!
  isRetryable: Boolean!
}

type AsyncWithdrawal @entity {
  id: ID! # Defined as "inputToken.id-key"
  key: Bytes!
  marginAccount: MarginAccount!
  effectiveUser: User! # set to the marginAccount.user or owner of an isolation mode address
  status: String! # one of CREATED, WITHDRAWAL_EXECUTED, WITHDRAWAL_EXECUTION_FAILED, WITHDRAWAL_CANCELLED
  inputToken: Token!
  inputAmount: BigDecimal!
  outputToken: Token!
  minOutputAmount: BigDecimal!
  outputAmount: BigDecimal!
  isRetryable: Boolean!
  isLiquidation: Boolean!
  extraData: Bytes!
}
